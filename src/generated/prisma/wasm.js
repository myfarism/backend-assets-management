
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  password: 'password',
  lastLogin: 'lastLogin',
  createdAt: 'createdAt',
  status: 'status',
  roleId: 'roleId'
};

exports.Prisma.AsetScalarFieldEnum = {
  asetId: 'asetId',
  merkDanTipe: 'merkDanTipe',
  tahun: 'tahun',
  kondisiAset: 'kondisiAset',
  masaBerlaku: 'masaBerlaku',
  nomorSeri: 'nomorSeri',
  statusAset: 'statusAset',
  statusKepemilikan: 'statusKepemilikan',
  lokasiId: 'lokasiId',
  urlQR: 'urlQR',
  urlFoto: 'urlFoto',
  createdAt: 'createdAt',
  pic: 'pic',
  kategoriAset: 'kategoriAset',
  subKategoriAsetId: 'subKategoriAsetId'
};

exports.Prisma.MaintenanceScalarFieldEnum = {
  maintenanceId: 'maintenanceId',
  idAset: 'idAset',
  tanggalMulai: 'tanggalMulai',
  perkiraanSelesai: 'perkiraanSelesai',
  tanggalSelesai: 'tanggalSelesai',
  statusMaintenance: 'statusMaintenance',
  createdAt: 'createdAt',
  deskripsi: 'deskripsi'
};

exports.Prisma.LokasiScalarFieldEnum = {
  idLokasi: 'idLokasi',
  lokasi: 'lokasi',
  createdAt: 'createdAt',
  kategoriAset: 'kategoriAset'
};

exports.Prisma.PerpindahanScalarFieldEnum = {
  idPindahan: 'idPindahan',
  lokasiId: 'lokasiId',
  idAset: 'idAset',
  tempatBaru: 'tempatBaru',
  tanggalPindah: 'tanggalPindah',
  createdAt: 'createdAt',
  tempatLama: 'tempatLama'
};

exports.Prisma.PengadaanScalarFieldEnum = {
  pengadaanId: 'pengadaanId',
  tanggalBeli: 'tanggalBeli',
  lokasiId: 'lokasiId',
  kategoriAset: 'kategoriAset',
  namaAset: 'namaAset',
  jumlahAset: 'jumlahAset',
  hargaSatuan: 'hargaSatuan',
  totalHarga: 'totalHarga',
  vendor: 'vendor',
  createdAt: 'createdAt'
};

exports.Prisma.NotifikasiScalarFieldEnum = {
  notifId: 'notifId'
};

exports.Prisma.SubAsetKategoriScalarFieldEnum = {
  subAsetId: 'subAsetId',
  nameSubAset: 'nameSubAset',
  createdAt: 'createdAt'
};

exports.Prisma.UserRoleScalarFieldEnum = {
  userRoleId: 'userRoleId',
  nameRole: 'nameRole',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserStatus = exports.$Enums.UserStatus = {
  aktif: 'aktif',
  nonaktif: 'nonaktif'
};

exports.AsetKondisi = exports.$Enums.AsetKondisi = {
  baik: 'baik',
  normal: 'normal',
  buruk: 'buruk'
};

exports.AsetStatus = exports.$Enums.AsetStatus = {
  aktif: 'aktif',
  nonaktif: 'nonaktif',
  maintenance: 'maintenance'
};

exports.AsetKategori = exports.$Enums.AsetKategori = {
  asetFisik: 'asetFisik',
  asetDigital: 'asetDigital'
};

exports.MaintenanceRequestStatus = exports.$Enums.MaintenanceRequestStatus = {
  ontime: 'ontime',
  overdue: 'overdue',
  onprocess: 'onprocess',
  done: 'done'
};

exports.Prisma.ModelName = {
  User: 'User',
  Aset: 'Aset',
  Maintenance: 'Maintenance',
  Lokasi: 'Lokasi',
  Perpindahan: 'Perpindahan',
  Pengadaan: 'Pengadaan',
  Notifikasi: 'Notifikasi',
  SubAsetKategori: 'SubAsetKategori',
  UserRole: 'UserRole'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
